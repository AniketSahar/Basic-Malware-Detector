import threading
import hashlib
import os
import tkinter as tk
from tkinter import ttk
root = tk.Tk()
#Global variable
malware_hashes = list(open("C:\\Users\\neels\\OneDrive\\Desktop\\L\\Src\\Database\\Hash database\\sha256\\textvhash.txt", 'r').read().split('\n'))
virusinfo = list(open("C:\\Users\\neels\\OneDrive\\Desktop\\L\\Src\\Database\\Hash database\\sha256\\virusinfo.txt", "r").read().split('\n'))
malware_hashes_md5 = list(open("C:\\Users\\neels\\OneDrive\\Desktop\\L\\Src\\Database\\Hash database\\md5\\md5HashOfVirus.unibit", 'r').read().split('\n'))


def sha256_hash(filename):
    try:
        with open(filename, "rb") as f:
            bytes = f.read()
            sha256 = hashlib.sha256(bytes).hexdigest()
        return sha256
    except:
        return 0

def md5_hash(filename):
    try:
        with open(filename, "rb") as f:
            bytes = f.read()
            md5 = hashlib.md5(bytes).hexdigest()
        return md5
    except:
        return 0

def malware_checker_one(pathoffile):
    hash_malware_check = sha256_hash(pathoffile)
    md5_malware_check = md5_hash(pathoffile)
    counter = 0

    for i in malware_hashes + malware_hashes_md5:
        if i == hash_malware_check or i == md5_malware_check:
            return virusinfo[counter]
        counter += 1
    return 0

virusName = []
virusPath = []

def update_progress(progress_var, time_label, progress, estimated_time):
    progress_var.set(progress)
    time_label.config(text=f"Estimated Time Left: {int(estimated_time)} seconds")

def virusScanner(path, progress_var, time_label, event):
    dir_list = list()
    for (dirpath, dirnames, filenames) in os.walk(path):
        dir_list += [os.path.join(dirpath, file) for file in filenames]

    total_files = len(dir_list)
    scanned_files = 0
    for i in dir_list:
        print(i)
        malwareresult = malware_checker_one(i)
        if malwareresult != 0:
            virusName.append(malwareresult + " :: File :: " + i)
            virusPath.append(i)
        scanned_files += 1
        progress = int((scanned_files / total_files) * 100)
        estimated_time = ((total_files - scanned_files) * 0.1)  # Assuming 0.1 seconds per file for simplicity

        # Use root.after to schedule GUI updates on the main thread
        root.after(0, update_progress, progress_var, time_label, progress, estimated_time)
    
    # Signal that scanning is complete
    event.set()

def on_scan():
    path = "C:\\"
    progress_var = tk.DoubleVar()
    progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate", variable=progress_var)
    progress_bar.pack(pady=20)
    
    time_label = tk.Label(root, text="Estimated Time Left: 0 seconds")
    time_label.pack(pady=10)
    
    # Create an event for synchronization
    scan_complete_event = threading.Event()
    
    # Start virusScanner in a new thread
    scan_thread = threading.Thread(target=virusScanner, args=(path, progress_var, time_label, scan_complete_event), daemon=True)
    scan_thread.start()
    
    # Wait for scanning to complete
    scan_complete_event.wait()
    
    # Check results after scanning is complete
    if virusName:  # If any virus/malware is found
        for i in virusName:
            print(f"Found malware: {i}")  # Replace with your speak function if needed
        print('Malware scan completed.')  # Replace with your speak function if needed
    else:
        print('No malware found. The system is clean.')  # Replace with your speak function if needed

if __name__ == "__main__":
    root.title("Virus Scanner")

    # Create a button to start scanning
    scan_button = tk.Button(root, text="Start Scan", command=on_scan)
    scan_button.pack(pady=20)

    # Start the GUI main loop
    root.mainloop()


# def sha256_hash(filename):
#     try:
#         with open(filename, "rb") as f:
#             bytes = f.read()
#             sha256 = hashlib.sha256(bytes).hexdigest()
#         return sha256
#     except:
#         return 0

# def md5_hash(filename):
#     try:
#         with open(filename, "rb") as f:
#             bytes = f.read()
#             md5 = hashlib.md5(bytes).hexdigest()
#         return md5
#     except:
#         return 0

# def malware_checker_one(pathoffile):
#     hash_malware_check = sha256_hash(pathoffile)
#     md5_malware_check = md5_hash(pathoffile)
#     counter = 0

#     for i in malware_hashes + malware_hashes_md5:
#         if i == hash_malware_check or i == md5_malware_check:
#             return virusinfo[counter]
#         counter += 1
#     return 0

# virusName = []
# virusPath = []

# def virusScanner(path, progress_var, time_label, event):
#     dir_list = list()
#     for (dirpath, dirnames, filenames) in os.walk(path):
#         dir_list += [os.path.join(dirpath, file) for file in filenames]

#     total_files = len(dir_list)
#     scanned_files = 0
#     for i in dir_list:
#         print(i)
#         malwareresult = malware_checker_one(i)
#         if malwareresult != 0:
#             virusName.append(malwareresult + " :: File :: " + i)
#             virusPath.append(i)
#         scanned_files += 1
#         progress = int((scanned_files / total_files) * 100)
#         progress_var.set(progress)
#         estimated_time = ((total_files - scanned_files) * 0.1)  # Assuming 0.1 seconds per file for simplicity
#         time_label.config(text=f"Estimated Time Left: {int(estimated_time)} seconds")
#         root.update_idletasks()

       
# def on_scan():
#     path = "C:\\"
#     progress_var = tk.DoubleVar()
#     progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate", variable=progress_var)
#     progress_bar.pack(pady=20)
    
#     time_label = tk.Label(root, text="Estimated Time Left: 0 seconds")
#     time_label.pack(pady=10)
    
#     # Create an event for synchronization
#     scan_complete_event = threading.Event()
    
#     # Start virusScanner in a new thread
#     threading.Thread(target=virusScanner, args=(path, progress_var, time_label, scan_complete_event), daemon=True).start()
    
#     # Wait for scanning to complete
#     scan_complete_event.wait()
    


    

# on_scan()
# root.mainloop()


